import java.util.ArrayList;

// Recursive function where Recursion Works
class Solution{

    public boolean isSafe(int row,int col, char[][] board){
        // Horizontal
        for(int j=0; j<board.length; j++){
            if(board[row][j] == 'Q'){
                return false;
            }
        }

        // Verical
        for(int i=0; i<board[0].length; i++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }

        // Upper Left
        int r = row;
        for(int c = col; c>=0 && r>=0; r--,c--){
            if(board[r][c] == 'Q'){
                return false;
            }
        }

        // Upper Right
        int r = row;
        for(int c = col; c<=board.length && r>=0; r--,c++){
            if(board[r][c] == 'Q'){
                return false;
            }
        }

        // Lower Left
        int r = row;
        for(int c = col; c>=0 && r<=board.length; r++,c--){
            if(board[r][c] == 'Q'){
                return false;
            }
        }

        // Lower Right
        int r = row;
        for(int c = col; c<=board.length && r<=board.length; r++,c++){
            if(board[r][c] == 'Q'){
                return false;
            }
        }

        return true;
    }

    public void saveBoard(char[][] board,List<List<String>> allBoards){
        String row = "";
        List<String> newBoard = new ArrayList<>();
        for(int i=0;i<board.length;i++){
            row = "";
            for(int j=0;j<board[0].length;j++){
                if(board[i][j] == 'Q'){
                    row+= 'Q';
                }
                else{
                    row += '.';
                }
            }
            newBoard.add(row);
        }
        allBoards.add(newBoard);
    }

    public void helper(char[][] board, List<List<String>> allBoards, int col){
        if(col==board.length){
            saveBoard(board,allBoards);
            return;
        }
        for(int row=0; row<board.length; row++){
            // If the current position is save for the Queen, then we will put it in that particular place
            if(isSafe(row, col, board)){
                board[row][col] = 'Q';
                helper(board,allBoards,col+1);
                // If the solution is incorrect in the future, then we will have to remove the Queen from the position
                board[row][col] = '.';
            }
        }
    }

    public static List<List<String>> solveNQueen(int n){
        List<List<String>> allBoards = new ArrayList<>();
        char [][] board = new board[n][n];

        helper(board,allBoards,0);

    }
}
